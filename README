This README file describes how to compile and set up GMES.

1. Download Latest Version

You can download the latest release at the GMES project page of sourceforge:

http://sourceforge.net/projects/gmes

The latest development version can be checked out through SVN with the following
instruction set:

svn co https://gmes.svn.sourceforge.net/svnroot/gmes gmes 

2. Compatibility

2.1. GNU/Linux

GMES has been tested on Debian GNU/Linux 5.0.8 Lenny. Also, GMES works on 
Ubuntu 10.04 LTS Lucid Lynx.

2.2. Windows

GMES has been tested on Windows 7 Enterprise K Service Pack 1. However, the 
recent version of Enthought Python Distribution(EPD, >= 6.2-2) is hard to set 
up suitable for GMES. Any contributions are welcomed.

2.3. Mac

GMES has not been tested on Mac. Any contributions are welcomed.

3. Preliminaries

3.1. GNU/Linux

GMES uses various Python and non-Python programs. You will need following 
programs to install and execute GMES. The following programs are provided as 
packages on Debian and Ubuntu distributions, except the MPICH2 and 
MPI for Python.

* python >= 2.5 (tested with 2.5.2 and 2.6.5) (Debian package: python)
* numpy (Debian package: python-numpy)
* scipy (Debian package: python-scipy)
* pytables (optional) (Debian package: python-tables)
* matplotlib (Debian package: python-matplotlib)
* MPI for Python >= 1.2.2 (optional) (with MPICH2 >= 1.3.2p1)
* swig >= 1.3.36 (to compile) (Debian package: swig)
* g++ (to compile) (Debian package: g++)

3.2. Windows

Enthought Python distribution provides all programs except MPICH2 and 
MPI4Python on which GMES depends. We didn't tested the MPI environment on 
Windows.

* Enthought Python Distribution (EPD) >= 6.2-2
* MinGW with C++ compiler (to compile)
* swig >= 2.0.4 (to compile)

4. Compile and Install

If you like to test the GMES without or before installation, follow 'compile 
for the inplace test' section. Otherwise, follow 'compile' and 'install' 
sections in order. The command preceding '#' mark means that the command 
should be executed as the root privilege. 

4.1. For GNU/Linux

4.1.1. compile for the inplace test

$ python setup.py build_ext --inplace

4.1.2. compile

$ python setup.py build_ext --swig-opts="-c++"

4.1.3. install

# python setup.py install build_ext --swig-opts="-c++"

4.2. For Windows

4.2.1. compile for the inplace test

$ python setup.py build_ext --inplace --compile=mingw32

4.2.2. compile

$ python setup.py build_ext --compile=mingw32

4.2.3. compile & install

# python setup.py install build_ext --compile=mingw32

5. Execution Commands

5.1. GNU/Linux with MPI2

Your MPI2 implementation may requires pre- or post- commands to exploit the 
parallel environment. Consult the manuals of your MPI2 implementation for 
these commands. <N> and <GMES SCRIPT> indicate the number of parallel process
and your script which uses the GMES package.
 
$ mpiexec -l -n <N> python <GMES SCRIPT>

If you use SLURM process manager, a special Python interpreter is required. 
Check the MPI for Python user manual at http://mpi4py.scipy.org/docs/usrman/.

6. Known Issues

6.1. Matplotlib in Windows

The EPD version of the Matplotlib package which is required by fdtd.show_* 
methods seems that it does not handle multiple plots in multiple windows.
Thus, on Windows, the multiple real-time display windows using fdtd.show_* 
methods could be freeze. The Linux version of matplotlib does not have this 
problem.

6.2. numpy.inf

GMES does not treat well the value of numpy.inf. Please use big enough 
value instead of numpy.inf.

6.3. compile failure on Windows

On Windows with EPD(<6.1) and MinGW, the compile command may die with the 
following error.

g++: build\temp.win32-2.5\Release\src\lib_pointwise_material.a: No such
file or directory

If you meet this error, comment out the following third line from 
C:<Python Folder>\Lib\distutils\cygwinccompiler.py.

# dllwrap uses different options than gcc/ld
if self.linker_dll == "dllwrap":
    # extra_preargs.extend(["--output-lib", lib_file]) <= this line
    # for dllwrap we have to use a special option
    extra_preargs.extend(["--def", def_file])
    
6.4. compile failure on Windows

If you use EPD(>=7.1-2) with MinGW on Windows 7, you will meet the following 
error message when you compile GMES.

In file included from c:\mingw\bin\../lib/gcc/mingw32/4.5.2/include/c++/cmath:629:0,
                 from c:\mingw\bin\../lib/gcc/mingw32/4.5.2/include/c++/complex:46,
                 from src\/pw_dcp.hh:19,
                 from src\pw_material_wrap.cpp:3243:
c:\mingw\bin\../lib/gcc/mingw32/4.5.2/include/c++/tr1_impl/cmath:203:11: error: '::hypot' has not been declared
error: command 'gcc' failed with exit status 1

This problem is not yet solved.

Kyungwon Chun (kwchun@gist.ac.kr)
