This README file describes how to compile and set up GMES.

1. Download Latest Version

You can download the latest release at the GMES project page of 
sourceforge:

http://www.sf.net/projects/gmes

The most current development version is always available from a 
subversion repository:

http://gmes.svn.sf.net/svnroot/gmes/trunk

1. Compatibility

1.1. GNU/Linux

GMES has been tested on Etch (stable) and Sid (unstable) version of
Debian GNU/Linux. Also, GMES works on Hardy Heron and Intrepid Ibex
version of Ubuntu. On Linux, you can use all features of GMES.

1.1. Windows

GMES has been tested on Windows XP Professional Service Pack 3 and
Vista Enterprise K Service Pack 1.

1. Preliminaries

1.1. GNU/Linux

GMES uses various Python and non-Python programs. You will need 
following programs to install and execute GMES.

* python >= 2.4 (tested with 2.4 and 2.5)
* numpy (Debian package: python-numpy)
* scipy (Debian package: python-scipy)
* pytables (optional) (Debian package: python-tables)
* matplotlib: version 0.91.2-2 of Debian Sid sometimes causes 
segmentation fault. 0.87.7-0.3 of Debian Etch and 0.92.2.0001 of 
Enthought Python for Windows are fine. (Debian package: 
python-matplotlib)
* MPI4Python >= 0.6.0 (optional) (with MPICH2 >= 1.0.8)
* swig >= 1.3 (for compile) (Debian package: swig)
* gcc (to compile)

1.1. Windows

Enthought Python distribution provides all programs except MPI4Python
and MPI2 implementation on which GMES depends.

* Enthought Python Distribution (EPD) >= 2.5.2001

1. Compile and Install

1.1. For GNU/Linux

1.1.1. compile for the inplace test

$ python setup.py build_ext --inplace --swig-opts="-c++ -outdir gmes"

1.1.1. compile

$ python setup.py build_ext --swig-opts="-c++"

1.1.1. install

# python setup.py install build_ext --swig-opts="-c++"

1.1. For Windows

1.1.1. compile for the inplace test

$ python setup.py build_ext --inplace --swig-opts="-c++ -outdir gmes" -c mingw32

1.1.1. compile

$ python setup.py build_ext -c mingw32

1.1.1. compile & install

# python setup.py install build_ext -c mingw32

1. Execution Commands

1.1. GNU/Linux with MPI2

Your MPI2 implementation may requires pre- or post- commands to exploit
the parallel environment.
 
$ mpiexec -machinefile <HOST FILE> -l -n <N> python <GMES SCRIPT>

1. Known Issues

1.1. Matplotlib in Windows

fdtd.show_* methods use Matplotlib packages. The Matplotlib package for
Windows seems to that it does not handle multiple plots in multiple
windows.

1.1. numpy.inf

GMES does not treat well the value of numpy.inf. Please use large 
enough value instead of numpy.inf.

1. FAQ

1.1. In Windows(TM), why does the display window freeze when I use 
	FDTD.show_permittivity_* and FDTD.show_* simultaneously?

The Windows version of matplotlib dose not handle the the multiple 
display windows fluently. The Linux version of matplotlib does not have
this problem.

1.1. In Windows(TM), the compile command dies with the following error.

g++: build\temp.win32-2.5\Release\src\lib_pointwise_material.a: No such
file or directory

Comment out the following the third line from 
C:<Python Folder>\Lib\distutils\cygwinccompiler.py.

# dllwrap uses different options than gcc/ld
if self.linker_dll == "dllwrap":
    extra_preargs.extend(["--output-lib", lib_file])
    # for dllwrap we have to use a special option
    extra_preargs.extend(["--def", def_file])
    
Kyungwon Chun (kwchun@gist.ac.kr)
