# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pw_material
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PwMaterialReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwMaterialReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwMaterialReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_PwMaterialReal
    __del__ = lambda self : None;
    __swig_setmethods__["i"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_i
    __swig_getmethods__["i"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_i
    if _newclass:i = property(eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_i, eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_i)


    __swig_setmethods__["j"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_j
    __swig_getmethods__["j"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_j
    if _newclass:j = property(eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_j, eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_j)


    __swig_setmethods__["k"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_k
    __swig_getmethods__["k"] = eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_k
    if _newclass:k = property(eval("_"+__name__.split('.')[-1]).PwMaterialReal_get_k, eval("_"+__name__.split('.')[-1]).PwMaterialReal_set_k)





    def update(*args): return _pw_material.PwMaterialReal_update(*args)
PwMaterialReal_swigregister = _pw_material.PwMaterialReal_swigregister
PwMaterialReal_swigregister(PwMaterialReal)

class MaterialElectricReal(PwMaterialReal):
    __swig_setmethods__ = {}
    for _s in [PwMaterialReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialElectricReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_MaterialElectricReal
    __del__ = lambda self : None;
    __swig_setmethods__["epsilon"] = eval("_"+__name__.split('.')[-1]).MaterialElectricReal_set_epsilon
    __swig_getmethods__["epsilon"] = eval("_"+__name__.split('.')[-1]).MaterialElectricReal_get_epsilon
    if _newclass:epsilon = property(eval("_"+__name__.split('.')[-1]).MaterialElectricReal_get_epsilon, eval("_"+__name__.split('.')[-1]).MaterialElectricReal_set_epsilon)



MaterialElectricReal_swigregister = _pw_material.MaterialElectricReal_swigregister
MaterialElectricReal_swigregister(MaterialElectricReal)

class MaterialMagneticReal(PwMaterialReal):
    __swig_setmethods__ = {}
    for _s in [PwMaterialReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMagneticReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_MaterialMagneticReal
    __del__ = lambda self : None;
    __swig_setmethods__["mu"] = eval("_"+__name__.split('.')[-1]).MaterialMagneticReal_set_mu
    __swig_getmethods__["mu"] = eval("_"+__name__.split('.')[-1]).MaterialMagneticReal_get_mu
    if _newclass:mu = property(eval("_"+__name__.split('.')[-1]).MaterialMagneticReal_get_mu, eval("_"+__name__.split('.')[-1]).MaterialMagneticReal_set_mu)



MaterialMagneticReal_swigregister = _pw_material.MaterialMagneticReal_swigregister
MaterialMagneticReal_swigregister(MaterialMagneticReal)

class DummyElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyElectricReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_epsilon(*args): return _pw_material.DummyElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DummyElectricReal_set_epsilon(*args)
    def update(*args): return _pw_material.DummyElectricReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DummyElectricReal
    __del__ = lambda self : None;
DummyElectricReal_swigregister = _pw_material.DummyElectricReal_swigregister
DummyElectricReal_swigregister(DummyElectricReal)

class DummyMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyMagneticReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_mu(*args): return _pw_material.DummyMagneticReal_get_mu(*args)
    def set_mu(*args): return _pw_material.DummyMagneticReal_set_mu(*args)
    def update(*args): return _pw_material.DummyMagneticReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DummyMagneticReal
    __del__ = lambda self : None;
DummyMagneticReal_swigregister = _pw_material.DummyMagneticReal_swigregister
DummyMagneticReal_swigregister(DummyMagneticReal)

class DummyExReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyExReal
    __del__ = lambda self : None;
DummyExReal_swigregister = _pw_material.DummyExReal_swigregister
DummyExReal_swigregister(DummyExReal)

class DummyEyReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEyReal
    __del__ = lambda self : None;
DummyEyReal_swigregister = _pw_material.DummyEyReal_swigregister
DummyEyReal_swigregister(DummyEyReal)

class DummyEzReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEzReal
    __del__ = lambda self : None;
DummyEzReal_swigregister = _pw_material.DummyEzReal_swigregister
DummyEzReal_swigregister(DummyEzReal)

class DummyHxReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHxReal
    __del__ = lambda self : None;
DummyHxReal_swigregister = _pw_material.DummyHxReal_swigregister
DummyHxReal_swigregister(DummyHxReal)

class DummyHyReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHyReal
    __del__ = lambda self : None;
DummyHyReal_swigregister = _pw_material.DummyHyReal_swigregister
DummyHyReal_swigregister(DummyHyReal)

class DummyHzReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHzReal
    __del__ = lambda self : None;
DummyHzReal_swigregister = _pw_material.DummyHzReal_swigregister
DummyHzReal_swigregister(DummyHzReal)

class ConstElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstElectricReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_epsilon(*args): return _pw_material.ConstElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.ConstElectricReal_set_epsilon(*args)
    __swig_setmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstElectricReal_set_value
    __swig_getmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstElectricReal_get_value
    if _newclass:value = property(eval("_"+__name__.split('.')[-1]).ConstElectricReal_get_value, eval("_"+__name__.split('.')[-1]).ConstElectricReal_set_value)



    def update(*args): return _pw_material.ConstElectricReal_update(*args)
    __swig_destroy__ = _pw_material.delete_ConstElectricReal
    __del__ = lambda self : None;
ConstElectricReal_swigregister = _pw_material.ConstElectricReal_swigregister
ConstElectricReal_swigregister(ConstElectricReal)

class ConstMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstMagneticReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_mu(*args): return _pw_material.ConstMagneticReal_get_mu(*args)
    def set_mu(*args): return _pw_material.ConstMagneticReal_set_mu(*args)
    __swig_setmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstMagneticReal_set_value
    __swig_getmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstMagneticReal_get_value
    if _newclass:value = property(eval("_"+__name__.split('.')[-1]).ConstMagneticReal_get_value, eval("_"+__name__.split('.')[-1]).ConstMagneticReal_set_value)



    def update(*args): return _pw_material.ConstMagneticReal_update(*args)
    __swig_destroy__ = _pw_material.delete_ConstMagneticReal
    __del__ = lambda self : None;
ConstMagneticReal_swigregister = _pw_material.ConstMagneticReal_swigregister
ConstMagneticReal_swigregister(ConstMagneticReal)

class ConstExReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstExReal
    __del__ = lambda self : None;
ConstExReal_swigregister = _pw_material.ConstExReal_swigregister
ConstExReal_swigregister(ConstExReal)

class ConstEyReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEyReal
    __del__ = lambda self : None;
ConstEyReal_swigregister = _pw_material.ConstEyReal_swigregister
ConstEyReal_swigregister(ConstEyReal)

class ConstEzReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEzReal
    __del__ = lambda self : None;
ConstEzReal_swigregister = _pw_material.ConstEzReal_swigregister
ConstEzReal_swigregister(ConstEzReal)

class ConstHxReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHxReal
    __del__ = lambda self : None;
ConstHxReal_swigregister = _pw_material.ConstHxReal_swigregister
ConstHxReal_swigregister(ConstHxReal)

class ConstHyReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHyReal
    __del__ = lambda self : None;
ConstHyReal_swigregister = _pw_material.ConstHyReal_swigregister
ConstHyReal_swigregister(ConstHyReal)

class ConstHzReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHzReal
    __del__ = lambda self : None;
ConstHzReal_swigregister = _pw_material.ConstHzReal_swigregister
ConstHzReal_swigregister(ConstHzReal)

class DielectricElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.DielectricElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DielectricElectricReal_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_DielectricElectricReal
    __del__ = lambda self : None;
DielectricElectricReal_swigregister = _pw_material.DielectricElectricReal_swigregister
DielectricElectricReal_swigregister(DielectricElectricReal)

class DielectricMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.DielectricMagneticReal_get_mu(*args)
    def set_mu(*args): return _pw_material.DielectricMagneticReal_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_DielectricMagneticReal
    __del__ = lambda self : None;
DielectricMagneticReal_swigregister = _pw_material.DielectricMagneticReal_swigregister
DielectricMagneticReal_swigregister(DielectricMagneticReal)

class DielectricExReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricExReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricExReal
    __del__ = lambda self : None;
DielectricExReal_swigregister = _pw_material.DielectricExReal_swigregister
DielectricExReal_swigregister(DielectricExReal)

class DielectricEyReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricEyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricEyReal
    __del__ = lambda self : None;
DielectricEyReal_swigregister = _pw_material.DielectricEyReal_swigregister
DielectricEyReal_swigregister(DielectricEyReal)

class DielectricEzReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricEzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricEzReal
    __del__ = lambda self : None;
DielectricEzReal_swigregister = _pw_material.DielectricEzReal_swigregister
DielectricEzReal_swigregister(DielectricEzReal)

class DielectricHxReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHxReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHxReal
    __del__ = lambda self : None;
DielectricHxReal_swigregister = _pw_material.DielectricHxReal_swigregister
DielectricHxReal_swigregister(DielectricHxReal)

class DielectricHyReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHyReal
    __del__ = lambda self : None;
DielectricHyReal_swigregister = _pw_material.DielectricHyReal_swigregister
DielectricHyReal_swigregister(DielectricHyReal)

class DielectricHzReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHzReal
    __del__ = lambda self : None;
DielectricHzReal_swigregister = _pw_material.DielectricHzReal_swigregister
DielectricHzReal_swigregister(DielectricHzReal)

class UpmlElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.UpmlElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.UpmlElectricReal_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_UpmlElectricReal
    __del__ = lambda self : None;
UpmlElectricReal_swigregister = _pw_material.UpmlElectricReal_swigregister
UpmlElectricReal_swigregister(UpmlElectricReal)

class UpmlMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.UpmlMagneticReal_get_mu(*args)
    def set_mu(*args): return _pw_material.UpmlMagneticReal_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_UpmlMagneticReal
    __del__ = lambda self : None;
UpmlMagneticReal_swigregister = _pw_material.UpmlMagneticReal_swigregister
UpmlMagneticReal_swigregister(UpmlMagneticReal)

class UpmlExReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlExReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlExReal
    __del__ = lambda self : None;
UpmlExReal_swigregister = _pw_material.UpmlExReal_swigregister
UpmlExReal_swigregister(UpmlExReal)

class UpmlEyReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlEyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlEyReal
    __del__ = lambda self : None;
UpmlEyReal_swigregister = _pw_material.UpmlEyReal_swigregister
UpmlEyReal_swigregister(UpmlEyReal)

class UpmlEzReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlEzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlEzReal
    __del__ = lambda self : None;
UpmlEzReal_swigregister = _pw_material.UpmlEzReal_swigregister
UpmlEzReal_swigregister(UpmlEzReal)

class UpmlHxReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHxReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHxReal
    __del__ = lambda self : None;
UpmlHxReal_swigregister = _pw_material.UpmlHxReal_swigregister
UpmlHxReal_swigregister(UpmlHxReal)

class UpmlHyReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHyReal
    __del__ = lambda self : None;
UpmlHyReal_swigregister = _pw_material.UpmlHyReal_swigregister
UpmlHyReal_swigregister(UpmlHyReal)

class UpmlHzReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHzReal
    __del__ = lambda self : None;
UpmlHzReal_swigregister = _pw_material.UpmlHzReal_swigregister
UpmlHzReal_swigregister(UpmlHzReal)

class CpmlElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.CpmlElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.CpmlElectricReal_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_CpmlElectricReal
    __del__ = lambda self : None;
CpmlElectricReal_swigregister = _pw_material.CpmlElectricReal_swigregister
CpmlElectricReal_swigregister(CpmlElectricReal)

class CpmlMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.CpmlMagneticReal_get_mu(*args)
    def set_mu(*args): return _pw_material.CpmlMagneticReal_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_CpmlMagneticReal
    __del__ = lambda self : None;
CpmlMagneticReal_swigregister = _pw_material.CpmlMagneticReal_swigregister
CpmlMagneticReal_swigregister(CpmlMagneticReal)

class CpmlExReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlExReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlExReal
    __del__ = lambda self : None;
CpmlExReal_swigregister = _pw_material.CpmlExReal_swigregister
CpmlExReal_swigregister(CpmlExReal)

class CpmlEyReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlEyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlEyReal
    __del__ = lambda self : None;
CpmlEyReal_swigregister = _pw_material.CpmlEyReal_swigregister
CpmlEyReal_swigregister(CpmlEyReal)

class CpmlEzReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlEzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlEzReal
    __del__ = lambda self : None;
CpmlEzReal_swigregister = _pw_material.CpmlEzReal_swigregister
CpmlEzReal_swigregister(CpmlEzReal)

class CpmlHxReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHxReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHxReal
    __del__ = lambda self : None;
CpmlHxReal_swigregister = _pw_material.CpmlHxReal_swigregister
CpmlHxReal_swigregister(CpmlHxReal)

class CpmlHyReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHyReal
    __del__ = lambda self : None;
CpmlHyReal_swigregister = _pw_material.CpmlHyReal_swigregister
CpmlHyReal_swigregister(CpmlHyReal)

class CpmlHzReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHzReal
    __del__ = lambda self : None;
CpmlHzReal_swigregister = _pw_material.CpmlHzReal_swigregister
CpmlHzReal_swigregister(CpmlHzReal)

class DrudeElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricReal, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.DrudeElectricReal_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DrudeElectricReal_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_DrudeElectricReal
    __del__ = lambda self : None;
DrudeElectricReal_swigregister = _pw_material.DrudeElectricReal_swigregister
DrudeElectricReal_swigregister(DrudeElectricReal)

class DrudeExReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeExReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeExReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeExReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeExReal
    __del__ = lambda self : None;
DrudeExReal_swigregister = _pw_material.DrudeExReal_swigregister
DrudeExReal_swigregister(DrudeExReal)

class DrudeEyReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeEyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeEyReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeEyReal
    __del__ = lambda self : None;
DrudeEyReal_swigregister = _pw_material.DrudeEyReal_swigregister
DrudeEyReal_swigregister(DrudeEyReal)

class DrudeEzReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeEzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeEzReal_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeEzReal
    __del__ = lambda self : None;
DrudeEzReal_swigregister = _pw_material.DrudeEzReal_swigregister
DrudeEzReal_swigregister(DrudeEzReal)

class DrudeHxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHxReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHxReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHxReal
    __del__ = lambda self : None;
DrudeHxReal_swigregister = _pw_material.DrudeHxReal_swigregister
DrudeHxReal_swigregister(DrudeHxReal)

class DrudeHyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHyReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHyReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHyReal
    __del__ = lambda self : None;
DrudeHyReal_swigregister = _pw_material.DrudeHyReal_swigregister
DrudeHyReal_swigregister(DrudeHyReal)

class DrudeHzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHzReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHzReal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHzReal
    __del__ = lambda self : None;
DrudeHzReal_swigregister = _pw_material.DrudeHzReal_swigregister
DrudeHzReal_swigregister(DrudeHzReal)

class PwMaterialCmplx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwMaterialCmplx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwMaterialCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_PwMaterialCmplx
    __del__ = lambda self : None;
    __swig_setmethods__["i"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_i
    __swig_getmethods__["i"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_i
    if _newclass:i = property(eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_i, eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_i)


    __swig_setmethods__["j"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_j
    __swig_getmethods__["j"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_j
    if _newclass:j = property(eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_j, eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_j)


    __swig_setmethods__["k"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_k
    __swig_getmethods__["k"] = eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_k
    if _newclass:k = property(eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_get_k, eval("_"+__name__.split('.')[-1]).PwMaterialCmplx_set_k)





    def update(*args): return _pw_material.PwMaterialCmplx_update(*args)
PwMaterialCmplx_swigregister = _pw_material.PwMaterialCmplx_swigregister
PwMaterialCmplx_swigregister(PwMaterialCmplx)

class MaterialElectricCmplx(PwMaterialCmplx):
    __swig_setmethods__ = {}
    for _s in [PwMaterialCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialElectricCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_MaterialElectricCmplx
    __del__ = lambda self : None;
    __swig_setmethods__["epsilon"] = eval("_"+__name__.split('.')[-1]).MaterialElectricCmplx_set_epsilon
    __swig_getmethods__["epsilon"] = eval("_"+__name__.split('.')[-1]).MaterialElectricCmplx_get_epsilon
    if _newclass:epsilon = property(eval("_"+__name__.split('.')[-1]).MaterialElectricCmplx_get_epsilon, eval("_"+__name__.split('.')[-1]).MaterialElectricCmplx_set_epsilon)



MaterialElectricCmplx_swigregister = _pw_material.MaterialElectricCmplx_swigregister
MaterialElectricCmplx_swigregister(MaterialElectricCmplx)

class MaterialMagneticCmplx(PwMaterialCmplx):
    __swig_setmethods__ = {}
    for _s in [PwMaterialCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMagneticCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_MaterialMagneticCmplx
    __del__ = lambda self : None;
    __swig_setmethods__["mu"] = eval("_"+__name__.split('.')[-1]).MaterialMagneticCmplx_set_mu
    __swig_getmethods__["mu"] = eval("_"+__name__.split('.')[-1]).MaterialMagneticCmplx_get_mu
    if _newclass:mu = property(eval("_"+__name__.split('.')[-1]).MaterialMagneticCmplx_get_mu, eval("_"+__name__.split('.')[-1]).MaterialMagneticCmplx_set_mu)



MaterialMagneticCmplx_swigregister = _pw_material.MaterialMagneticCmplx_swigregister
MaterialMagneticCmplx_swigregister(MaterialMagneticCmplx)

class DummyElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyElectricCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_epsilon(*args): return _pw_material.DummyElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DummyElectricCmplx_set_epsilon(*args)
    def update(*args): return _pw_material.DummyElectricCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DummyElectricCmplx
    __del__ = lambda self : None;
DummyElectricCmplx_swigregister = _pw_material.DummyElectricCmplx_swigregister
DummyElectricCmplx_swigregister(DummyElectricCmplx)

class DummyMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyMagneticCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_mu(*args): return _pw_material.DummyMagneticCmplx_get_mu(*args)
    def set_mu(*args): return _pw_material.DummyMagneticCmplx_set_mu(*args)
    def update(*args): return _pw_material.DummyMagneticCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DummyMagneticCmplx
    __del__ = lambda self : None;
DummyMagneticCmplx_swigregister = _pw_material.DummyMagneticCmplx_swigregister
DummyMagneticCmplx_swigregister(DummyMagneticCmplx)

class DummyExCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyExCmplx
    __del__ = lambda self : None;
DummyExCmplx_swigregister = _pw_material.DummyExCmplx_swigregister
DummyExCmplx_swigregister(DummyExCmplx)

class DummyEyCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEyCmplx
    __del__ = lambda self : None;
DummyEyCmplx_swigregister = _pw_material.DummyEyCmplx_swigregister
DummyEyCmplx_swigregister(DummyEyCmplx)

class DummyEzCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEzCmplx
    __del__ = lambda self : None;
DummyEzCmplx_swigregister = _pw_material.DummyEzCmplx_swigregister
DummyEzCmplx_swigregister(DummyEzCmplx)

class DummyHxCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHxCmplx
    __del__ = lambda self : None;
DummyHxCmplx_swigregister = _pw_material.DummyHxCmplx_swigregister
DummyHxCmplx_swigregister(DummyHxCmplx)

class DummyHyCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHyCmplx
    __del__ = lambda self : None;
DummyHyCmplx_swigregister = _pw_material.DummyHyCmplx_swigregister
DummyHyCmplx_swigregister(DummyHyCmplx)

class DummyHzCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DummyHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHzCmplx
    __del__ = lambda self : None;
DummyHzCmplx_swigregister = _pw_material.DummyHzCmplx_swigregister
DummyHzCmplx_swigregister(DummyHzCmplx)

class ConstElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstElectricCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_epsilon(*args): return _pw_material.ConstElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.ConstElectricCmplx_set_epsilon(*args)
    __swig_setmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstElectricCmplx_set_value
    __swig_getmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstElectricCmplx_get_value
    if _newclass:value = property(eval("_"+__name__.split('.')[-1]).ConstElectricCmplx_get_value, eval("_"+__name__.split('.')[-1]).ConstElectricCmplx_set_value)



    def update(*args): return _pw_material.ConstElectricCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_ConstElectricCmplx
    __del__ = lambda self : None;
ConstElectricCmplx_swigregister = _pw_material.ConstElectricCmplx_swigregister
ConstElectricCmplx_swigregister(ConstElectricCmplx)

class ConstMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstMagneticCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_mu(*args): return _pw_material.ConstMagneticCmplx_get_mu(*args)
    def set_mu(*args): return _pw_material.ConstMagneticCmplx_set_mu(*args)
    __swig_setmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstMagneticCmplx_set_value
    __swig_getmethods__["value"] = eval("_"+__name__.split('.')[-1]).ConstMagneticCmplx_get_value
    if _newclass:value = property(eval("_"+__name__.split('.')[-1]).ConstMagneticCmplx_get_value, eval("_"+__name__.split('.')[-1]).ConstMagneticCmplx_set_value)



    def update(*args): return _pw_material.ConstMagneticCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_ConstMagneticCmplx
    __del__ = lambda self : None;
ConstMagneticCmplx_swigregister = _pw_material.ConstMagneticCmplx_swigregister
ConstMagneticCmplx_swigregister(ConstMagneticCmplx)

class ConstExCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstExCmplx
    __del__ = lambda self : None;
ConstExCmplx_swigregister = _pw_material.ConstExCmplx_swigregister
ConstExCmplx_swigregister(ConstExCmplx)

class ConstEyCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEyCmplx
    __del__ = lambda self : None;
ConstEyCmplx_swigregister = _pw_material.ConstEyCmplx_swigregister
ConstEyCmplx_swigregister(ConstEyCmplx)

class ConstEzCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEzCmplx
    __del__ = lambda self : None;
ConstEzCmplx_swigregister = _pw_material.ConstEzCmplx_swigregister
ConstEzCmplx_swigregister(ConstEzCmplx)

class ConstHxCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHxCmplx
    __del__ = lambda self : None;
ConstHxCmplx_swigregister = _pw_material.ConstHxCmplx_swigregister
ConstHxCmplx_swigregister(ConstHxCmplx)

class ConstHyCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHyCmplx
    __del__ = lambda self : None;
ConstHyCmplx_swigregister = _pw_material.ConstHyCmplx_swigregister
ConstHyCmplx_swigregister(ConstHyCmplx)

class ConstHzCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_ConstHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHzCmplx
    __del__ = lambda self : None;
ConstHzCmplx_swigregister = _pw_material.ConstHzCmplx_swigregister
ConstHzCmplx_swigregister(ConstHzCmplx)

class DielectricElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.DielectricElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DielectricElectricCmplx_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_DielectricElectricCmplx
    __del__ = lambda self : None;
DielectricElectricCmplx_swigregister = _pw_material.DielectricElectricCmplx_swigregister
DielectricElectricCmplx_swigregister(DielectricElectricCmplx)

class DielectricMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.DielectricMagneticCmplx_get_mu(*args)
    def set_mu(*args): return _pw_material.DielectricMagneticCmplx_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_DielectricMagneticCmplx
    __del__ = lambda self : None;
DielectricMagneticCmplx_swigregister = _pw_material.DielectricMagneticCmplx_swigregister
DielectricMagneticCmplx_swigregister(DielectricMagneticCmplx)

class DielectricExCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricExCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricExCmplx
    __del__ = lambda self : None;
DielectricExCmplx_swigregister = _pw_material.DielectricExCmplx_swigregister
DielectricExCmplx_swigregister(DielectricExCmplx)

class DielectricEyCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricEyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricEyCmplx
    __del__ = lambda self : None;
DielectricEyCmplx_swigregister = _pw_material.DielectricEyCmplx_swigregister
DielectricEyCmplx_swigregister(DielectricEyCmplx)

class DielectricEzCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricEzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricEzCmplx
    __del__ = lambda self : None;
DielectricEzCmplx_swigregister = _pw_material.DielectricEzCmplx_swigregister
DielectricEzCmplx_swigregister(DielectricEzCmplx)

class DielectricHxCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHxCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHxCmplx
    __del__ = lambda self : None;
DielectricHxCmplx_swigregister = _pw_material.DielectricHxCmplx_swigregister
DielectricHxCmplx_swigregister(DielectricHxCmplx)

class DielectricHyCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHyCmplx
    __del__ = lambda self : None;
DielectricHyCmplx_swigregister = _pw_material.DielectricHyCmplx_swigregister
DielectricHyCmplx_swigregister(DielectricHyCmplx)

class DielectricHzCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DielectricHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DielectricHzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DielectricHzCmplx
    __del__ = lambda self : None;
DielectricHzCmplx_swigregister = _pw_material.DielectricHzCmplx_swigregister
DielectricHzCmplx_swigregister(DielectricHzCmplx)

class UpmlElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.UpmlElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.UpmlElectricCmplx_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_UpmlElectricCmplx
    __del__ = lambda self : None;
UpmlElectricCmplx_swigregister = _pw_material.UpmlElectricCmplx_swigregister
UpmlElectricCmplx_swigregister(UpmlElectricCmplx)

class UpmlMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.UpmlMagneticCmplx_get_mu(*args)
    def set_mu(*args): return _pw_material.UpmlMagneticCmplx_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_UpmlMagneticCmplx
    __del__ = lambda self : None;
UpmlMagneticCmplx_swigregister = _pw_material.UpmlMagneticCmplx_swigregister
UpmlMagneticCmplx_swigregister(UpmlMagneticCmplx)

class UpmlExCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlExCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlExCmplx
    __del__ = lambda self : None;
UpmlExCmplx_swigregister = _pw_material.UpmlExCmplx_swigregister
UpmlExCmplx_swigregister(UpmlExCmplx)

class UpmlEyCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlEyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlEyCmplx
    __del__ = lambda self : None;
UpmlEyCmplx_swigregister = _pw_material.UpmlEyCmplx_swigregister
UpmlEyCmplx_swigregister(UpmlEyCmplx)

class UpmlEzCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlEzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlEzCmplx
    __del__ = lambda self : None;
UpmlEzCmplx_swigregister = _pw_material.UpmlEzCmplx_swigregister
UpmlEzCmplx_swigregister(UpmlEzCmplx)

class UpmlHxCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHxCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHxCmplx
    __del__ = lambda self : None;
UpmlHxCmplx_swigregister = _pw_material.UpmlHxCmplx_swigregister
UpmlHxCmplx_swigregister(UpmlHxCmplx)

class UpmlHyCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHyCmplx
    __del__ = lambda self : None;
UpmlHyCmplx_swigregister = _pw_material.UpmlHyCmplx_swigregister
UpmlHyCmplx_swigregister(UpmlHyCmplx)

class UpmlHzCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_UpmlHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.UpmlHzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_UpmlHzCmplx
    __del__ = lambda self : None;
UpmlHzCmplx_swigregister = _pw_material.UpmlHzCmplx_swigregister
UpmlHzCmplx_swigregister(UpmlHzCmplx)

class CpmlElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.CpmlElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.CpmlElectricCmplx_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_CpmlElectricCmplx
    __del__ = lambda self : None;
CpmlElectricCmplx_swigregister = _pw_material.CpmlElectricCmplx_swigregister
CpmlElectricCmplx_swigregister(CpmlElectricCmplx)

class CpmlMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_mu(*args): return _pw_material.CpmlMagneticCmplx_get_mu(*args)
    def set_mu(*args): return _pw_material.CpmlMagneticCmplx_set_mu(*args)
    __swig_destroy__ = _pw_material.delete_CpmlMagneticCmplx
    __del__ = lambda self : None;
CpmlMagneticCmplx_swigregister = _pw_material.CpmlMagneticCmplx_swigregister
CpmlMagneticCmplx_swigregister(CpmlMagneticCmplx)

class CpmlExCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlExCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlExCmplx
    __del__ = lambda self : None;
CpmlExCmplx_swigregister = _pw_material.CpmlExCmplx_swigregister
CpmlExCmplx_swigregister(CpmlExCmplx)

class CpmlEyCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlEyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlEyCmplx
    __del__ = lambda self : None;
CpmlEyCmplx_swigregister = _pw_material.CpmlEyCmplx_swigregister
CpmlEyCmplx_swigregister(CpmlEyCmplx)

class CpmlEzCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlEzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlEzCmplx
    __del__ = lambda self : None;
CpmlEzCmplx_swigregister = _pw_material.CpmlEzCmplx_swigregister
CpmlEzCmplx_swigregister(CpmlEzCmplx)

class CpmlHxCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHxCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHxCmplx
    __del__ = lambda self : None;
CpmlHxCmplx_swigregister = _pw_material.CpmlHxCmplx_swigregister
CpmlHxCmplx_swigregister(CpmlHxCmplx)

class CpmlHyCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHyCmplx
    __del__ = lambda self : None;
CpmlHyCmplx_swigregister = _pw_material.CpmlHyCmplx_swigregister
CpmlHyCmplx_swigregister(CpmlHyCmplx)

class CpmlHzCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_CpmlHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.CpmlHzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_CpmlHzCmplx
    __del__ = lambda self : None;
CpmlHzCmplx_swigregister = _pw_material.CpmlHzCmplx_swigregister
CpmlHzCmplx_swigregister(CpmlHzCmplx)

class DrudeElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricCmplx, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_epsilon(*args): return _pw_material.DrudeElectricCmplx_get_epsilon(*args)
    def set_epsilon(*args): return _pw_material.DrudeElectricCmplx_set_epsilon(*args)
    __swig_destroy__ = _pw_material.delete_DrudeElectricCmplx
    __del__ = lambda self : None;
DrudeElectricCmplx_swigregister = _pw_material.DrudeElectricCmplx_swigregister
DrudeElectricCmplx_swigregister(DrudeElectricCmplx)

class DrudeExCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeExCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeExCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeExCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeExCmplx
    __del__ = lambda self : None;
DrudeExCmplx_swigregister = _pw_material.DrudeExCmplx_swigregister
DrudeExCmplx_swigregister(DrudeExCmplx)

class DrudeEyCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeEyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeEyCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeEyCmplx
    __del__ = lambda self : None;
DrudeEyCmplx_swigregister = _pw_material.DrudeEyCmplx_swigregister
DrudeEyCmplx_swigregister(DrudeEyCmplx)

class DrudeEzCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeEzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _pw_material.DrudeEzCmplx_update(*args)
    __swig_destroy__ = _pw_material.delete_DrudeEzCmplx
    __del__ = lambda self : None;
DrudeEzCmplx_swigregister = _pw_material.DrudeEzCmplx_swigregister
DrudeEzCmplx_swigregister(DrudeEzCmplx)

class DrudeHxCmplx(DielectricHxCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHxCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHxCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHxCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHxCmplx
    __del__ = lambda self : None;
DrudeHxCmplx_swigregister = _pw_material.DrudeHxCmplx_swigregister
DrudeHxCmplx_swigregister(DrudeHxCmplx)

class DrudeHyCmplx(DielectricHyCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHyCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHyCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHyCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHyCmplx
    __del__ = lambda self : None;
DrudeHyCmplx_swigregister = _pw_material.DrudeHyCmplx_swigregister
DrudeHyCmplx_swigregister(DrudeHyCmplx)

class DrudeHzCmplx(DielectricHzCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHzCmplx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzCmplx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHzCmplx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pw_material.new_DrudeHzCmplx(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHzCmplx
    __del__ = lambda self : None;
DrudeHzCmplx_swigregister = _pw_material.DrudeHzCmplx_swigregister
DrudeHzCmplx_swigregister(DrudeHzCmplx)



